package net.esle.sinadura.core.validate;


import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.cert.CertPath;
import java.security.cert.CertStore;
import java.security.cert.CertStoreException;
import java.security.cert.CertificateException;
import java.security.cert.X509CertSelector;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.bouncycastle.cms.CMSException;
import org.bouncycastle.cms.CMSSignedData;
import org.bouncycastle.tsp.TSPException;
import org.bouncycastle.tsp.TimeStampToken;
import org.bouncycastle.util.encoders.Base64;

import es.mityc.javasign.io.Base64Decoder;


public class TimestampUtil {
	
	private static final Log log = LogFactory.getLog(TimestampUtil.class);
	

	public static X509Certificate verifyTimestampCertificate(TimeStampToken ts, Set<CertStore> certStores, String provider) {
		// TODO cambiar este metodo para que reciba un certStore List (en vez de un Keystore)

		// if (provider == null)
		// provider = "BC";

		try {
			for (CertStore certStore : certStores) {
				X509CertSelector s = new X509CertSelector();
				Collection<X509Certificate> certs = (Collection<X509Certificate>) certStore.getCertificates(s);
				for (X509Certificate cert : certs) {

					try {
						ts.validate(cert, provider);
						return cert;

					} catch (Exception ex) {
						// logger.log(Level.INFO, "controled exception", e);
					}
				}
			}

		} catch (Exception e) {
		}
		return null;
	}
	
	public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchProviderException, CertificateException, CertStoreException, CMSException, TSPException, IOException {
		
		// zain incorrecto
//		String s = "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";
		// zain correcto
		String s = "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";
		
		byte[] bytes = Base64.decode(s);
		
		CMSSignedData csd = new CMSSignedData(bytes);
		TimeStampToken token = new TimeStampToken(csd); 
		
		CertStore certStoreTimestamp = token.getCertificatesAndCRLs("Collection", null);
		Set<CertStore> certStoreList = new HashSet<CertStore>();
		certStoreList.add(certStoreTimestamp);
//		certStoreList.add(CertPathUtil.convert2CertStore(ksCache));
		
		X509Certificate signer = TimestampUtil.verifyTimestampCertificate(token, certStoreList, null);
		System.out.println("signer: " + signer.getSubjectX500Principal().getName());
		System.out.println("serial: " + signer.getSerialNumber());
		
//		if (signer != null) {
//			
//			List<X509Certificate> chain = new ArrayList<X509Certificate>();
//			chain.add(signer);
//			CertPath certPath = CertPathUtil.convert2CertPath(chain);
//			certPath = CertPathUtil.completeChain(certPath, certStoreList);
//			List<X509Certificate> tsChain = (List<X509Certificate>) certPath.getCertificates();
//		}
		
	}
	
}